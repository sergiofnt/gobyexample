<!DOCTYPE html>
<html>
<head>
	<meta http-eqiv="content-type" content="text/html;charset=utf-8" />
	<title>Go за Прикладом: Тайм-аути (Timeouts)</title>
	<link rel=stylesheet href="site.css" />
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-75170058-3"></script>
	<script type="text/javascript">
	if (window.location.host == "gobyexample.com.ua") {
		window.dataLayer = window.dataLayer || [];
		function gtag(){dataLayer.push(arguments);}
		gtag('js',      new Date());
		gtag('config', 'UA-75170058-3');
	}
	</script>
</head>
<body>
	<div class="example" id="timeouts">
	<h2><a href="./">Go за Прикладом</a>: Тайм-аути (Timeouts)</h2>
	
	<table>
		
		<tr>
			<td class="docs"><p><em>Тайм-аути</em> необхідні програмам, що тісно взаємодіють з
зовнішніми ресурсами або враховують власний час
виконання. Завдяки каналам та <code>select</code> - робота з
тайм-аутами в Go - проста і приємна.</p>
</td>
			<td class="code empty leading">
			
			
			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			<a href="http://play.golang.org/p/kVWBaXGmiAX"><img title="Run code" src="play.png" class="run" /></a>
			<div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;time&quot;</span>
<span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Припустимо, в нашому прикладі, ми виконуємо виклик
кудись &ldquo;назовні&rdquo;, що поверне результат каналом
<code>c1</code> за 2 секунди.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">c1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
        <span class="nx">c1</span> <span class="o">&lt;-</span> <span class="s">&quot;результат 1&quot;</span>
    <span class="p">}()</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Використання <code>select</code> реалізує таймаут, де
<code>res := &lt;-c1</code> чекає на повідомлення і <code>&lt;-Time.After</code>
також чекає (1 секунду), на повідомлення з каналу
(який сам і створює). Оскільки <code>select</code> опрацьовує лише
перший готовий виклик, переможцем буде <code>time.After</code>
оскільки його виконання займає, лише, 1 секунду, на противагу
2-ом секундам виконання повільного запиту &ldquo;назовні&rdquo;
(відповідь з якого очікуємо з <code>c1</code>).</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="k">select</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">res</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">c1</span><span class="p">:</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
    <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">time</span><span class="p">.</span><span class="nx">After</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">):</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;таймаут 1&quot;</span><span class="p">)</span>
    <span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Якщо ми зробимо тайм-аут трошка довшим (скажімо - 3 секунди),
ми встигнемо отримати та надрукувати результат канала <code>c2</code>,
що буде отримано раніше більш довгого тайм-ауту.</p>
</td>
			<td class="code">
			
			<div class="highlight"><pre>    <span class="nx">c2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
        <span class="nx">c2</span> <span class="o">&lt;-</span> <span class="s">&quot;результат 2&quot;</span>
    <span class="p">}()</span>
    <span class="k">select</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">res</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">c2</span><span class="p">:</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
    <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">time</span><span class="p">.</span><span class="nx">After</span><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">):</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;таймаут 2&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
	</table>
	
	<table>
		
		<tr>
			<td class="docs"><p>Запуск цієї програми покаже що підчас першої операції
час сплив, а друга операцію завершилась вчасно.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="gp">$</span> go run timeouts.go
<span class="go">таймаут 1</span>
<span class="go">результат 2</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Використання цього шоблону напряму залежить від
обміну результатами за допомогою каналів. Викорастання
канали, поряд з <code>select</code> - є основою Go в реалізації
ассинхроності. Надалі ми розглянемо ще два приклади,
що використовують данні примітиви: <a href="timers">хронометри</a>
та <a href="tickers">маятники</a>.</p>
</td>
			<td class="code empty">
			
			
			</td>
		</tr>
	
	</table>
	


	<p class="next">
		Наступний приклад: <a href="non-blocking-channel-operations">Не Блокуючі Операції на Каналах</a>.
	</p>

<p class="footer">
Автор <a href="https://twitter.com/mmcgrana">@mmcgrana</a> | Переклад <a href="https://twitter.com/butuzov">@butuzov</a> | <a href="https://github.com/butuzov/gobyexample/blob/ukrainian/examples/timeouts">source</a> | <a href="https://github.com/butuzov/gobyexample#license">ліцензія</a>
</p>
</div>
</body>
</html>
