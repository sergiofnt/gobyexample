<!DOCTYPE html>
<html>
<head>
	<meta http-eqiv="content-type" content="text/html;charset=utf-8" />
	<title>Go за Прикладом: JSON</title>
	<link rel=stylesheet href="site.css" />
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-75170058-3"></script>
	<script type="text/javascript">
	if (window.location.host == "gobyexample.com.ua") {
		window.dataLayer = window.dataLayer || [];
		function gtag(){dataLayer.push(arguments);}
		gtag('js',      new Date());
		gtag('config', 'UA-75170058-3');
	}
	</script>
</head>
<body>
	<div class="example" id="json">
	<h2><a href="./">Go за Прикладом</a>: JSON</h2>
	
	<table>
		
		<tr>
			<td class="docs"><p>Go підтрмує кодування та розкодування формату JSON
на рівні, як базових типів даних, так і власних
структур даних, так би кажучи &ldquo;з коробки&rdquo;.</p>
</td>
			<td class="code empty leading">
			
			
			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			<a href="http://play.golang.org/p/AknIjyeY-Dt"><img title="Run code" src="play.png" class="run" /></a>
			<div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;encoding/json&quot;</span>
<span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
<span class="kn">import</span> <span class="s">&quot;os&quot;</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Ми скористаємось цими структурами для демонстрації
кодування та розкодування нетипових для Go структур даних.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kd">type</span> <span class="nx">response1</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Page</span>   <span class="kt">int</span>
    <span class="nx">Fruits</span> <span class="p">[]</span><span class="kt">string</span>
<span class="p">}</span>
<span class="kd">type</span> <span class="nx">response2</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Page</span>   <span class="kt">int</span>      <span class="s">`json:&quot;page&quot;`</span>
    <span class="nx">Fruits</span> <span class="p">[]</span><span class="kt">string</span> <span class="s">`json:&quot;fruits&quot;`</span>
<span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Для початку ми розглянемо кодування базових
типів, доступних у Go, в формат JSON.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">bolB</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">bolB</span><span class="p">))</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">intB</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">intB</span><span class="p">))</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">fltB</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="mf">2.34</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">fltB</span><span class="p">))</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">strB</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="s">&quot;gopher&quot;</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">strB</span><span class="p">))</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>В цьому прикладі ми працюємо з коллекціями
- зрізами та мапами, що будуть кодуватись в JSON
об’єкти передбачуваним (стандартизованим) чином.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">slcD</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;peach&quot;</span><span class="p">,</span> <span class="s">&quot;pear&quot;</span><span class="p">}</span>
    <span class="nx">slcB</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">slcD</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">slcB</span><span class="p">))</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">mapD</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">&quot;lettuce&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
    <span class="nx">mapB</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">mapD</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">mapB</span><span class="p">))</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Пакет JSON автоматично кодує ваші типи даних.
Це дозволяє автоматично включати експортовані
поля до вашого виводу, або навпаки - виключати
не-експортовані з цього виводу. По-замовчуванню,
ці елементи будуть носити тіж назви, що і поля
структури яка кодувалась.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">res1D</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">response1</span><span class="p">{</span>
        <span class="nx">Page</span><span class="p">:</span>   <span class="mi">1</span><span class="p">,</span>
        <span class="nx">Fruits</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;peach&quot;</span><span class="p">,</span> <span class="s">&quot;pear&quot;</span><span class="p">}}</span>
    <span class="nx">res1B</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">res1D</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">res1B</span><span class="p">))</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Ви можете скористатись тегами або метаданим для
декларації полів у вашій структурі даних, гнучко налаштовуючи
логіку відображення або спожвання даних за ключами.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">res2D</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">response2</span><span class="p">{</span>
        <span class="nx">Page</span><span class="p">:</span>   <span class="mi">1</span><span class="p">,</span>
        <span class="nx">Fruits</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;peach&quot;</span><span class="p">,</span> <span class="s">&quot;pear&quot;</span><span class="p">}}</span>
    <span class="nx">res2B</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">res2D</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">res2B</span><span class="p">))</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Тепер, розглянемо як декодувати дані з формату JSON
у значення Go, на прикладі узагальненої структури.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">byt</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{&quot;num&quot;:6.13,&quot;strs&quot;:[&quot;a&quot;,&quot;b&quot;]}`</span><span class="p">)</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Ми починаємо з того, що декларуємо змінну, якою пакет
JSON скористається для збереження розкодованих даних.
Змінна <code>dat</code> з типом <code>map[string]interface{}</code> буде зберігати
дані у вигляді мапи з рядковим ключем та значенням довільного типу.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="kd">var</span> <span class="nx">dat</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Розкодуємо наш JSON та проведемо перевірку на можливі помилки.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">byt</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">dat</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">dat</span><span class="p">)</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Для використання даних розкодованої мапи, нам необхідно буде
сконвертувати (англійською <code>cast</code>) дані (тому що значення
нашої мапи - початково нетипізовані - <code>interface{}</code>), щоб
продовжити роботу вже з чітко визначиним типом,
що підтримується Go. Для прикладу ми конверутємо значення
мапи за ключем <code>num</code> в тип <code>float64</code>.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">num</span> <span class="o">:=</span> <span class="nx">dat</span><span class="p">[</span><span class="s">&quot;num&quot;</span><span class="p">].(</span><span class="kt">float64</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Доступ до вкладених даних - потребує серії конвертацій.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">strs</span> <span class="o">:=</span> <span class="nx">dat</span><span class="p">[</span><span class="s">&quot;strs&quot;</span><span class="p">].([]</span><span class="kd">interface</span><span class="p">{})</span>
    <span class="nx">str1</span> <span class="o">:=</span> <span class="nx">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">].(</span><span class="kt">string</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">str1</span><span class="p">)</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Слід використовувати ваші власні структури даних для
розкодування даних, це гарантія додаткової типобезпеки,
що прибирає необхідність перевіряти типи під час використання.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="nx">str</span> <span class="o">:=</span> <span class="s">`{&quot;page&quot;: 1, &quot;fruits&quot;: [&quot;apple&quot;, &quot;peach&quot;]}`</span>
    <span class="nx">res</span> <span class="o">:=</span> <span class="nx">response2</span><span class="p">{}</span>
    <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">res</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">Fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>У, вже розглянутих, прикладах ми використовуєм зрізи байтів
та рядки як посередники між даними та JOSN репрезентацією
для виводу до стандартного потоку даних. Подивіться, як
можна скористатись перенаправленням потоку за допомогою
власної реалізацію інтерфейсу <code>Writer</code>, наприклад <code>os.Writer</code>,
або навіть запис у HTTP Response.</p>
</td>
			<td class="code">
			
			<div class="highlight"><pre>    <span class="nx">enc</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">)</span>
    <span class="nx">d</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">&quot;lettuce&quot;</span><span class="p">:</span> <span class="mi">7</span><span class="p">}</span>
    <span class="nx">enc</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
	</table>
	
	<table>
		
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="gp">$</span> go run json.go
<span class="go">true</span>
<span class="go">1</span>
<span class="go">2.34</span>
<span class="go">&quot;gopher&quot;</span>
<span class="go">[&quot;apple&quot;,&quot;peach&quot;,&quot;pear&quot;]</span>
<span class="go">{&quot;apple&quot;:5,&quot;lettuce&quot;:7}</span>
<span class="go">{&quot;Page&quot;:1,&quot;Fruits&quot;:[&quot;apple&quot;,&quot;peach&quot;,&quot;pear&quot;]}</span>
<span class="go">{&quot;page&quot;:1,&quot;fruits&quot;:[&quot;apple&quot;,&quot;peach&quot;,&quot;pear&quot;]}</span>
<span class="go">map[num:6.13 strs:[a b]]</span>
<span class="go">6.13</span>
<span class="go">a</span>
<span class="go">{1 [apple peach]}</span>
<span class="go">apple</span>
<span class="go">{&quot;apple&quot;:5,&quot;lettuce&quot;:7}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Ми ознайомились з базовою роботою Go з форматом JSON,
і радимо прочитати статтю <a href="http://blog.golang.org/2011/01/json-and-go.html">JSON та Go</a>
та документацію <a href="http://golang.org/pkg/encoding/json/">пакету JSON</a>
для отримання більш розгорнутої інформації про сам пакет в Go.</p>
</td>
			<td class="code empty">
			
			
			</td>
		</tr>
	
	</table>
	


	<p class="next">
		Наступний приклад: <a href="xml">XML</a>.
	</p>

<p class="footer">
Автор <a href="https://twitter.com/mmcgrana">@mmcgrana</a> | Переклад <a href="https://twitter.com/butuzov">@butuzov</a> | <a href="https://github.com/butuzov/gobyexample/blob/ukrainian/examples/json">source</a> | <a href="https://github.com/butuzov/gobyexample#license">ліцензія</a>
</p>
</div>
</body>
</html>
