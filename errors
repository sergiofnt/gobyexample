<!DOCTYPE html>
<html>
<head>
	<meta http-eqiv="content-type" content="text/html;charset=utf-8" />
	<title>Go за Прикладом: Помилки (Errors)</title>
	<link rel=stylesheet href="site.css" />
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-75170058-3"></script>
	<script type="text/javascript">
	if (window.location.host == "gobyexample.com.ua") {
		window.dataLayer = window.dataLayer || [];
		function gtag(){dataLayer.push(arguments);}
		gtag('js',      new Date());
		gtag('config', 'UA-75170058-3');
	}
	</script>
</head>
<body>
	<div class="example" id="errors">
	<h2><a href="./">Go за Прикладом</a>: Помилки (Errors)</h2>
	
	<table>
		
		<tr>
			<td class="docs"><p>Одна з ідіом Go, це отримувати <code>помилки</code> що повертаються (з функцій)
разом з іншими даними. Це виділяє Go на тлі мов що використовують
<em>виключеня</em> (<em>exceptions</em>) - Java, Ruby та інше, або в порівнянні
з перевантаженням одиночного результату та помилки, що інколи
використовується в С. Підхід Go, полегшує нагляд за функціями,
що повертають помилки і опрацьовують їх (помилки) - так само,
як і інші, не-помилкові, задачі.</p>
</td>
			<td class="code empty leading">
			
			
			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			<a href="http://play.golang.org/p/NaGAXCnFpHk"><img title="Run code" src="play.png" class="run" /></a>
			<div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;errors&quot;</span>
<span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>За погодженнням, помилкою вказується останнє,
з значень що повертається, що, на додачу має тип
<code>error</code> (який є вбудованим інтерфейсом).</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kd">func</span> <span class="nx">f1</span><span class="p">(</span><span class="nx">arg</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">arg</span> <span class="o">==</span> <span class="mi">42</span> <span class="p">{</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Конструкція <code>errors.New</code> створює базове значення
помилки з заданим повідомленням.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;can&#39;t work with 42&quot;</span><span class="p">)</span>
    <span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>А <code>nil</code> значення на позиції помилки - вказує на те,
що ніякої помилки не виникло.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="k">return</span> <span class="nx">arg</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Можливо використовувати і інші типи як помилки (<code>error</code>s)
(тільки - якщо ці типи реалізують метод <code>Error()</code> на собі,
тобто імплементують інтерфейс помилки).
Ось приклад, що використовує власний тип помилки, яка
репрезентує <code>помилку</code> значення переданого аргументом.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kd">type</span> <span class="nx">argError</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">arg</span>  <span class="kt">int</span>
    <span class="nx">prob</span> <span class="kt">string</span>
<span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">argError</span><span class="p">)</span> <span class="nx">Error</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;%d - %s&quot;</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">arg</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">prob</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kd">func</span> <span class="nx">f2</span><span class="p">(</span><span class="nx">arg</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">arg</span> <span class="o">==</span> <span class="mi">42</span> <span class="p">{</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>У цьому випадку ми вкористовуємо синтакс <code>&amp;argError</code>
щоб створити нову структуру - забезпечивши її значеннями
для двох полів <code>arg</code> та <code>prob</code>.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">argError</span><span class="p">{</span><span class="nx">arg</span><span class="p">,</span> <span class="s">&quot;can&#39;t work with it&quot;</span><span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">arg</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Ци два цикли тестують кожну знаших функцій (що повертають
помилки), зауважте, що перевірка помилки, що проводиться
поряд з оператором умовного розгалуження <code>if</code>,
це одна з ідіом Go.</p>
</td>
			<td class="code leading">
			
			<div class="highlight"><pre>    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">42</span><span class="p">}</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">f1</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;f1 failed:&quot;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;f1 worked:&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">42</span><span class="p">}</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">f2</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;f2 failed:&quot;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;f2 worked:&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Якщо ви хочете скористатись даними вашої помилки програмно -
необхідно дістати помилку як зразок (instance) вашого
типу, використовуючи заяву типу (type assertion).</p>
</td>
			<td class="code">
			
			<div class="highlight"><pre>    <span class="nx">_</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">f2</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">ae</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.(</span><span class="o">*</span><span class="nx">argError</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">ae</span><span class="p">.</span><span class="nx">arg</span><span class="p">)</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">ae</span><span class="p">.</span><span class="nx">prob</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

			</td>
		</tr>
	
	</table>
	
	<table>
		
		<tr>
			<td class="docs"></td>
			<td class="code leading">
			
			<div class="highlight"><pre><span class="gp">$</span> go run errors.go
<span class="go">f1 worked: 10</span>
<span class="go">f1 failed: can&#39;t work with 42</span>
<span class="go">f2 worked: 10</span>
<span class="go">f2 failed: 42 - can&#39;t work with it</span>
<span class="go">42</span>
<span class="go">can&#39;t work with it</span>
</pre></div>

			</td>
		</tr>
	
		<tr>
			<td class="docs"><p>Як завжди, трошка докаладнішу інформацію про помилки
можна знайти в <a href="http://blog.golang.org/2011/07/error-handling-and-go.html">записах</a>
блогу команди розробників Go.</p>
</td>
			<td class="code empty">
			
			
			</td>
		</tr>
	
	</table>
	


	<p class="next">
		Наступний приклад: <a href="goroutines">Горутини (Goroutines)</a>.
	</p>

<p class="footer">
Автор <a href="https://twitter.com/mmcgrana">@mmcgrana</a> | Переклад <a href="https://twitter.com/butuzov">@butuzov</a> | <a href="https://github.com/butuzov/gobyexample/blob/ukrainian/examples/errors">source</a> | <a href="https://github.com/butuzov/gobyexample#license">ліцензія</a>
</p>
</div>
</body>
</html>
